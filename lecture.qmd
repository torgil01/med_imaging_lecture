---
title: "Working with medical data in python"
author: "Torgil Vangberg"
format: html
---

In the exercise we will learn how to load and extract features from nifti files. You may enter the  code in the console (IPython for example) or save the code in a script and run it.

# Setting up the software environment 
engine: knitr
highlight-style: github
revealjs:
        theme: [white, custom.scss]

## Libraries

In this exercise we will use two extra libraries

-   `nibabel` for reading and writing images
-   `numpy` for math operations
-   `matplotlib` for plotting

## Using virtual environments {.smaller}

*Not neccesary, but good practice:*

-   Install packages in a virtual environment
-   Prevents conflicts with other libraries/code

Here we use python `venv` to set up a virtual environment.

::: callout-note
If you have `conda`, you can use that to create a virtual environment. Also, if you have `conda` but want to use `venv`, deactivate conda: `conda deactivate`. 
:::

```{bash}
#| eval: false
#| echo: true
mkdir .venv   # create folder where we will store the venv
python -m venv .venv/nii # create venv called "nii" 
source .venv/nii/bin/activate # activate nii environment
```


::: callout-note
Things may be a bit more complicated under windows.
Under windows, it might be best to use `powershell` for these operations. Also, `python` may be called `py` in windows.
:::


## Installing libraries

Check that the `nii` environment is active. You can see that it is active if the promte is changed to `(nii)`.

Now we can install the libraries

```{.bash}
pip install nibabel
pip install numpy
```

These libraries are only be available in the `nii` environment.

# Example data

-   Will use data from the XIX dataset [https://brain-development.org/ixi-dataset](%5Bhttps://brain-development.org/ixi-dataset/%5D)
-   I have processed images from one participant so that several brain regions are labeled.
-   The goal is to extract two *features* from the images.
    -   Volume of the hippocampus
    -   Average proton density of the hippocampus

## Download data
Download the data from: https://drive.google.com/drive/folders/1hCWnJNbRW9OC0CV1fkozqaxrp2IwNod1?usp=drive_link 

Save it in a folder called `data` alongside your code. 

# Loading data in python
We will start by reading the T1 and label image.

First we load the image objects as follows:

```{python}
#| eval: true
#| echo: true

import nibabel as nib
import numpy as np
t1_nii = nib.load("data/T1.nii.gz")
label_nii = nib.load("data/labels.nii.gz")
```

Note that `nib.load` only returns the header and not the image data. We load the image data using the method `.get_fdata()`.

```{python}
#| eval: true
#| echo: true

t1 = t1_nii.get_fdata()
label = label_nii.get_fdata()
```

We have now loaded the data from the two images. The image headers are in `t1_nii` and `label_nii`, while the image data is in `t1` and `label`. Note that the image data is stored as a `numpy` array. (You can write `type(t1)` to check the type of a variable.) 


## Inspecting the image header
Sometimes we need to get data from the image header. For example, the voxel size or data type. 

```{python}
#| eval: true
#| echo: true

print(t1_nii.header)
```

Above is the complete header from the T1 image. 

You can get a specific value using `t1_nii.header["key"]`. For example, the voxel size is `t1_nii.header["pixdim"][1]` and the data type is `t1_nii.header["datatype"]`

## Viewing the image
Detailed inspection of the images are best done using a dedicated image viewer, but we can also use `matplotlib` to plot some slices. We can for example display slice 120 in the z-direction as follows:  

```{python} 
#| eval: true
#| echo: true

import matplotlib.pyplot as plt

plt.figure()
plt.imshow(t1[:,:,120], cmap="gray")
plt.show()
```

### Plot with overays
Below is a example of plotting the T1 and the label image on top of each other. Note that I set the bakground to NaN in label to avoid ploting the background.


```{python}
#| eval: true
#| echo: true


label = np.where(label == 0, np.nan, label)
plt.figure()
plt.imshow(t1[:,:,120], cmap="gray")
plt.imshow(label[:,:,120], cmap="Paired", alpha=0.5)
plt.show()
```


# Extracting "features"
We will extract two simple features from the images.Hippocampus volume and proton density in the hippocampus. Hippocampus volume is a "real" feature that is associated with intelligence and is a good predictor of dementia. Proton density is not commonly used, but it illustrates how one can use a labeled image to extract data from another image, which is often done.

## Hippocampus volume
```{python}
#| eval: true
#| echo: true

hippocampus = np.where(label == 2, 1, 0)
hippocampus_volume = np.sum(hippocampus) * t1_nii.header["pixdim"][1] * t1_nii.header["pixdim"][2] * t1_nii.header["pixdim"][3]
hippocampus_pd = np.mean(t1[hippocampus == 1])
